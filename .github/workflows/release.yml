name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  release:
    runs-on: isg-ocp-x86-medium
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Set up Maven 3.9.9
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        maven-version: '3.9.9'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Update version in POM
      run: |
        # Remove 'v' prefix if present for Maven version
        VERSION="${{ github.event.inputs.version }}"
        VERSION=${VERSION#v}
        mvn versions:set -DnewVersion=$VERSION
        mvn versions:commit

    - name: Build and package
      run: mvn clean package -DskipTests=false

    - name: Verify build artifacts
      run: |
        echo "Generated files:"
        ls -la target/dx-data-sharer.*
        echo ""
        echo "HPI file size: $(stat -c%s target/dx-data-sharer.hpi) bytes"
        echo "JAR file size: $(stat -c%s target/dx-data-sharer.jar) bytes"

    - name: Create and push tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pom.xml
        git commit -m "Release ${{ github.event.inputs.version }}" || echo "No changes to commit"
        git tag ${{ github.event.inputs.version }}
        git push origin ${{ github.event.inputs.version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version }}
        name: DX Data Sharer Plugin ${{ github.event.inputs.version }}
        files: |
          target/dx-data-sharer.hpi
          target/dx-data-sharer.jar
        body: |
          ## DX Data Sharer Jenkins Plugin - ${{ github.event.inputs.version }}
          
          This release contains the compiled Jenkins plugin for sharing build data with DX (https://getdx.com/).
          
          ### üöÄ Installation Instructions
          
          1. **Download** the `dx-data-sharer.hpi` file from the assets below
          2. **Install in Jenkins:**
             - Navigate to "Manage Jenkins" ‚Üí "Plugins" ‚Üí "Advanced Settings"
             - Under "Deploy Plugin", click "Choose File" and select the downloaded HPI file
             - Click "Deploy" and restart Jenkins
          3. **Configure the plugin:**
             - Go to "Manage Jenkins" ‚Üí "System"
             - Find the "DX Data Sharing" section
             - Configure your DX API settings
          
          ### üì¶ Release Assets
          
          - **`dx-data-sharer.hpi`** - Jenkins plugin installation file
          - **`dx-data-sharer.jar`** - Plugin JAR file (for development)
          
          ### üîß Requirements
          
          - Jenkins 2.451 or later
          - Java 11 or later
          - Valid DX API credentials
          
          ### üìù Usage
          
          After installation, the plugin will automatically:
          - Collect Jenkins build data
          - Share relevant metrics with your DX instance
          - Respect configured filters for repositories, pipelines, and branches
          
          ---
          
          **Built from commit:** `${{ github.sha }}`  
          **Build date:** `${{ github.run_id }}`
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload to GitHub Packages
      run: |
        mvn deploy -DskipTests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}